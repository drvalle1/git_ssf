x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=2
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new) #reflect proposal if negative
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(a1.store,type='l')
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.0001
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new) #reflect proposal if negative
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(a1.store,type='l')
library(circular)
?dvonmises
data1 <- rvonmises(1000, circular(0), 10, control.circular=list(units="degrees"))
plot(data1)
ff <- function(x) dvonmises(x, mu=circular(pi), kappa=10)
curve.circular(ff, join=TRUE, xlim=c(-2.3, 1),
main="Density of a VonMises Distribution \n mu=pi, kappa=10")
x=seq(from=0,to=2*pi,length.out=1000)
y=dvonmises(x, mu=circular(pi), kappa=10)
plot(x,y)
x=seq(from=0,to=2*pi,length.out=1000)
y=dvonmises(x, mu=circular(2*pi*0.99), kappa=10)
plot(x,y)
plot(res$NBN,type='l')
?rnbinom
nobs=10000
n=3
mu=10
x=rnbinom(nobs,mu=mu,size=n)
p=n/(mu+n)
mean(x); mu
var(x); n*(1-p)/(p^2)
n=3
mu=10
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=3
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=25
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
p
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
z=3
mu=2
sig2=2
dnorm(z,mean=mu,sd=sqrt(sig2),log=T)
dnorm(2*z,mean=2*mu,sd=2*sqrt(sig2),log=T)
e.star=3
mu=2
sig2=2
pnorm(e.star,mean=mu,sd=sqrt(sig2),log=T)
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
sig2=1
e=e.star/sqrt(sig2.star)
mu=mu.star/sqrt(sig2.star)
pnorm(e,mean=mu,sd=sqrt(sig2),log=T)
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
sig2=1
e=e.star/sqrt(sig2.star)
mu=mu.star/sqrt(sig2.star)
pnorm(e,mean=mu,sd=sqrt(sig2))
library('devtools')
install.packages('devtools')
library('devtools')
install_github('drvalle1/EcoCluster',build_vignettes=T)
library('devtools')
install_github('drvalle1/EcoCluster',build_vignettes=T)
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
devtools::install_github("joshcullen/bayesmove")
install.packages('backports')
devtools::install_github("joshcullen/bayesmove")
install.packages('Rtools')
devtools::install_github("joshcullen/bayesmove")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
devtools::install_github("joshcullen/bayesmove")
install.packages('backports')
devtools::install_github("joshcullen/bayesmove")
devtools::install_github("joshcullen/bayesmove")
install.packages('devtools')
install.packages("devtools")
library('devtools')
sessionInfo()
devtools::install_github("joshcullen/bayesmove")
library(devtools)
install_github("gilsonshimizu/ldacov",auth_token = "1e039dbc6f5c0832b2fc11a5d88882ce3dbcf2ec")
rm(list=ls())
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
tmp=fread('cumul_time and covs.csv')
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
tmp=fread('cumul_time and covs.csv')
head(tmp)
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.01)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
head(dat2)
setwd('U:\\GIT_models\\git_ssf\\fake data')
ind=which(colnames(dat2)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat2[,-ind],'fake_data_trimmed.csv',row.names=F)
dim(dat2)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
head(dat)
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.01)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
setwd('U:\\GIT_models\\git_ssf\\fake data')
ind=which(colnames(dat2)%in%c('x','y','cum.time','time.prob.sel'))
head(dat2[,-ind])
head(dat2)
ind
class(dat2)
class(dat)
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
str(dat3)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
head(dat3[,-ind])
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
#basic settings
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
xmat=array(runif(nloc*ncov,min=-1,max=1),dim=c(xdim,ydim,ncov))
ind.loc=matrix(1:nloc,xdim,ydim)
#parameters
alpha=c(1,-1,0,0) #parameters for time model
gamma.b=2 #this comes from time model
betas=c(-1,1,0) #parameters for resource selection function
#calculate mean time and preference
mean.time=mean.pref=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
mean.pref[i,j]=exp(xmat[i,j,]%*%betas)
}
}
#simulate movement
current.pos=ind.loc[500,500]
time.int=4
nsim=1000
coord=matrix(NA,nsim,2)
coord[1,]=c(500,500)
colnames(coord)=c('x','y')
window1=20
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
# image(res2)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get preference
tmp=cbind(res3[,'y'],res3[,'x'])
pref=mean.pref[tmp]
res4=cbind(res3,pref)
#calculate probabilities
# tempo.rel=res4[,'cum.time']/max(res4[,'cum.time'])
# plot(res4[,'x'],res4[,'y'],col=grey(tempo.rel))
prob=dgamma(time.int,gamma.b*res4[,'cum.time'],gamma.b)*res4[,'pref']
soma=sum(prob)
prob=prob/soma
#plot(prob,type='h')
# prob1=prob-min(prob)
# prob1=prob1/max(prob1)
#plot(res4[,'x'],res4[,'y'],col=grey(1-prob1))
#decide where to move
tmp=rmultinom(1,size=1,prob=prob)
ind=which(tmp==1)
res5=res4[ind,]
coord[i+1,c('x','y')]=res5[c('x','y')]
}
#show trajectory
plot(coord[,'x'],coord[,'y'],type='l')
#save results
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(coord,'fake data coord.csv',row.names=F)
xmat1=matrix(xmat,1,xdim*ydim*ncov)
write.csv(xmat1,'fake data xmat.csv',row.names=F)
rm(list=ls())
library('akima') #for linear interpolation
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
tmp=fread('fake data xmat.csv')
xdim=1000
ydim=1000
ncov=3
xmat=array(unlist(tmp),c(xdim,ydim,ncov))
#get data
coord=data.matrix(read.csv('fake data coord.csv',as.is=T))
#parameters
alpha=c(1,-1,0,0) #parameters for time model
#calculate mean time
mean.time=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
}
}
#important variables
nsim=nrow(coord)
window1=20
ndados=((window1*2)+1)^2
store.calc=matrix(NA,(nsim-1)*ndados,5+ncov)
oooo=1
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get covariates
aux=numeric()
for (j in 1:ncov){
tmp=cbind(res3[,'y'],res3[,'x'],j)
tmp1=xmat[tmp]
aux=cbind(aux,tmp1)
}
colnames(aux)=paste0('cov',1:ncov)
res4=cbind(res3,aux)
#store results
ind=which(res4[,'x']==coord[i,'x'] & res4[,'y']==coord[i,'y'])
zeros=rep(0,nrow(res4))
zeros[ind]=1
seq1=oooo:(oooo+ndados-1)
store.calc[seq1,]=cbind(res4,zeros,i)
oooo=oooo+ndados
}
colnames(store.calc)=c(colnames(res4),'selected','mov.id')
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(store.calc,'cumul_time and covs.csv',row.names=F)
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.01)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
#export
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=10000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=10000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
apply(mod1$betas,2,quantile,c(0.025,0.975))
