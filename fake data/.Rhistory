ngibbs=1000
nburn=ngibbs/2
#get probability time
time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
log.time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b,log=T)
#things useful to calculate llk
cond.sel=dat$selected==1
mov.id=dat$mov.id
nmov.id=max(mov.id)
log.time.prob.cond.sel=log.time.prob[cond.sel]
time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
log.time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b,log=T)
#things useful to calculate llk
cond.sel=dat$selected==1
mov.id=dat$mov.id
nmov.id=max(mov.id)
log.time.prob.cond.sel=log.time.prob[cond.sel]
nobs=nrow(dat)
betas=c(0,0,0)
get.llk(betas=betas,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('cumul_time and covs.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
log.time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b,log=T)
#things useful to calculate llk
cond.sel=dat$selected==1
mov.id=dat$mov.id
nmov.id=max(mov.id)
log.time.prob.cond.sel=log.time.prob[cond.sel]
nobs=nrow(dat)
#initial values
betas=c(0,0,0)
#things for gibbs
ncov=length(betas)
jump1=rep(1,ncov)
store.betas=matrix(NA,ngibbs,ncov)
store.llk=matrix(NA,ngibbs,1)
betas.old=betas
prior.old=dnorm(betas.old,mean=0,sd=10,log=T)
i=1
betas.new=betas.old
betas.new=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.old
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
betas.new=betas.old
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new
llk.old
tmp=acceptMH(p0=llk.old+prior.old[i],
p1=llk.new+dnorm(betas.new[i],mean=0,sd=10,log=T),
x0=betas.old[i],x1=betas.new[i])
tmp
betas.old=betas
prior.old=dnorm(betas.old,mean=0,sd=10,log=T)
accept1=rep(0,ncov)
for (i in 1:ncov){
betas.new=betas.old
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
tmp=acceptMH(p0=llk.old+prior.old[i],
p1=llk.new+dnorm(betas.new[i],mean=0,sd=10,log=T),
x0=betas.old[i],x1=betas.new[i])
if (tmp$accept==1) {betas.old[i]=tmp$x; accept1[i]=1}
}
betas.old
betas.old=betas
prior.old=dnorm(betas.old,mean=0,sd=10,log=T)
accept1=rep(0,ncov)
for (i in 1:ncov){
betas.new=betas.old
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
tmp=acceptMH(p0=llk.old+prior.old[i],
p1=llk.new+dnorm(betas.new[i],mean=0,sd=10,log=T),
x0=betas.old[i],x1=betas.new[i])
if (tmp$accept==1) {betas.old[i]=tmp$x; accept1[i]=1}
}
betas.old
betas.old=betas
prior.old=dnorm(betas.old,mean=0,sd=10,log=T)
accept1=rep(0,ncov)
for (i in 1:ncov){
betas.new=betas.old
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
tmp=acceptMH(p0=llk.old+prior.old[i],
p1=llk.new+dnorm(betas.new[i],mean=0,sd=10,log=T),
x0=betas.old[i],x1=betas.new[i])
if (tmp$accept==1) {betas.old[i]=tmp$x; accept1[i]=1}
}
betas.old
betas.old=betas
prior.old=dnorm(betas.old,mean=0,sd=10,log=T)
accept1=rep(0,ncov)
for (i in 1:ncov){
betas.new=betas.old
betas.new[i]=rnorm(1,mean=betas.old[i],sd=jump1[i])
llk.old=get.llk(betas=betas.old,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
llk.new=get.llk(betas=betas.new,xmat=xmat,time.prob=time.prob,mov.id=mov.id,
nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
tmp=acceptMH(p0=llk.old+prior.old[i],
p1=llk.new+dnorm(betas.new[i],mean=0,sd=10,log=T),
x0=betas.old[i],x1=betas.new[i])
if (tmp$accept==1) {betas.old[i]=tmp$x; accept1[i]=1}
}
betas.old
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
#get probability time
time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
log.time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b,log=T)
#things useful to calculate llk
cond.sel=dat$selected==1
mov.id=dat$mov.id
nmov.id=max(mov.id)
log.time.prob.cond.sel=log.time.prob[cond.sel]
nobs=nrow(dat)
#initial values
betas=c(0,0,0)
#things for gibbs
ncov=length(betas)
jump1=rep(1,ncov)
store.betas=matrix(NA,ngibbs,ncov)
store.llk=matrix(NA,ngibbs,1)
tmp=sample.betas(betas=betas,ncov=ncov,jump1=jump1,xmat=xmat,time.prob=time.prob,
mov.id=mov.id,nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
betas=tmp$betas
betas
str(tmp)
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
log.time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b,log=T)
#things useful to calculate llk
cond.sel=dat$selected==1
mov.id=dat$mov.id
nmov.id=max(mov.id)
log.time.prob.cond.sel=log.time.prob[cond.sel]
nobs=nrow(dat)
#initial values
betas=c(0,0,0)
#things for gibbs
ncov=length(betas)
jump1=rep(1,ncov)
accept1=rep(0,ncov)
accept.output=50
store.betas=matrix(NA,ngibbs,ncov)
store.llk=matrix(NA,ngibbs,1)
#sample betas
tmp=sample.betas(betas=betas,ncov=ncov,jump1=jump1,xmat=xmat,time.prob=time.prob,
mov.id=mov.id,nmov.id=nmov.id,nobs=nobs,log.time.prob.cond.sel=log.time.prob.cond.sel)
betas=tmp$betas
accept1=accept1+tmp$accept1
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
k
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('cumul_time and covs.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(time.int=time.int,gamma.b=gamma.b,dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('cumul_time and covs.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(time.int=time.int,gamma.b=gamma.b,dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
source('U:/GIT_models/git_ssf/run ssf gibbs.R', echo=TRUE)
str(mod)
str(mod1)
plot(mod1$llk,type='l')
plot(mod1$llk[seq1],type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
plot(mod1$betas[,1],type='l')
par(mfrow=c(ncov,3))
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
#basic settings
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
xmat=array(runif(nloc*ncov,min=-1,max=1),dim=c(xdim,ydim,ncov))
ind.loc=matrix(1:nloc,xdim,ydim)
#parameters
alpha=c(1,-1,0,0) #parameters for time model
betas=c(1,-1,0) #parameters for resource selection function
gamma.b=2
#calculate mean time and preference
mean.time=mean.pref=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
mean.pref[i,j]=exp(xmat[i,j,]%*%betas)
}
}
#simulate movement
current.pos=ind.loc[500,500]
time.int=4
nsim=1000
coord=matrix(NA,nsim,2)
coord[1,]=c(500,500)
colnames(coord)=c('x','y')
window1=20
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get preference
tmp=cbind(res3[,'y'],res3[,'x'])
pref=mean.pref[tmp]
res4=cbind(res3,pref)
#calculate probabilities
# tempo.rel=res4[,'cum.time']/max(res4[,'cum.time'])
# plot(res4[,'x'],res4[,'y'],col=grey(tempo.rel))
prob=dgamma(time.int,gamma.b*res4[,'cum.time'],gamma.b)*res4[,'pref']
soma=sum(prob)
prob=prob/soma
#plot(prob,type='h')
# prob1=prob-min(prob)
# prob1=prob1/max(prob1)
#plot(res4[,'x'],res4[,'y'],col=grey(1-prob1))
#decide where to move
tmp=rmultinom(1,size=1,prob=prob)
ind=which(tmp==1)
res5=res4[ind,]
coord[i+1,c('x','y')]=res5[c('x','y')]
}
#show trajectory
plot(coord[,'x'],coord[,'y'],type='l')
#save results
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(coord,'fake data coord.csv',row.names=F)
xmat1=matrix(xmat,1,xdim*ydim*ncov)
write.csv(xmat1,'fake data xmat.csv',row.names=F)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('cumul_time and covs.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(time.int=time.int,gamma.b=gamma.b,dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
#basic settings
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
xmat=array(runif(nloc*ncov,min=-1,max=1),dim=c(xdim,ydim,ncov))
ind.loc=matrix(1:nloc,xdim,ydim)
#parameters
alpha=c(1,-1,0,0) #parameters for time model
betas=c(1,-1,0) #parameters for resource selection function
gamma.b=2
#calculate mean time and preference
mean.time=mean.pref=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
mean.pref[i,j]=exp(xmat[i,j,]%*%betas)
}
}
#simulate movement
current.pos=ind.loc[500,500]
time.int=4
nsim=1000
coord=matrix(NA,nsim,2)
coord[1,]=c(500,500)
colnames(coord)=c('x','y')
window1=20
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get preference
tmp=cbind(res3[,'y'],res3[,'x'])
pref=mean.pref[tmp]
res4=cbind(res3,pref)
#calculate probabilities
# tempo.rel=res4[,'cum.time']/max(res4[,'cum.time'])
# plot(res4[,'x'],res4[,'y'],col=grey(tempo.rel))
prob=dgamma(time.int,gamma.b*res4[,'cum.time'],gamma.b)*res4[,'pref']
soma=sum(prob)
prob=prob/soma
#plot(prob,type='h')
# prob1=prob-min(prob)
# prob1=prob1/max(prob1)
#plot(res4[,'x'],res4[,'y'],col=grey(1-prob1))
#decide where to move
tmp=rmultinom(1,size=1,prob=prob)
ind=which(tmp==1)
res5=res4[ind,]
coord[i+1,c('x','y')]=res5[c('x','y')]
}
#show trajectory
plot(coord[,'x'],coord[,'y'],type='l')
#save results
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(coord,'fake data coord.csv',row.names=F)
xmat1=matrix(xmat,1,xdim*ydim*ncov)
write.csv(xmat1,'fake data xmat.csv',row.names=F)
rm(list=ls())
library('akima') #for linear interpolation
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
tmp=fread('fake data xmat.csv')
xdim=1000
ydim=1000
ncov=3
xmat=array(unlist(tmp),c(xdim,ydim,ncov))
#get data
coord=data.matrix(read.csv('fake data coord.csv',as.is=T))
#parameters
alpha=c(1,-1,0,0) #parameters for time model
#calculate mean time
mean.time=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
}
}
#important variables
nsim=nrow(coord)
window1=20
ndados=((window1*2)+1)^2
store.calc=matrix(NA,(nsim-1)*ndados,5+ncov)
oooo=1
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get covariates
aux=numeric()
for (j in 1:ncov){
tmp=cbind(res3[,'y'],res3[,'x'],j)
tmp1=xmat[tmp]
aux=cbind(aux,tmp1)
}
colnames(aux)=paste0('cov',1:ncov)
res4=cbind(res3,aux)
#store results
ind=which(res4[,'x']==coord[i,'x'] & res4[,'y']==coord[i,'y'])
zeros=rep(0,nrow(res4))
zeros[ind]=1
seq1=oooo:(oooo+ndados-1)
store.calc[seq1,]=cbind(res4,zeros,i)
oooo=oooo+ndados
}
colnames(store.calc)=c(colnames(res4),'selected','mov.id')
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(store.calc,'cumul_time and covs.csv',row.names=F)
#for this code to work, we need the x and y coordinates to function as indexes which can be used to subset the data
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('cumul_time and covs.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#time model details
time.int=4
gamma.b=2
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(time.int=time.int,gamma.b=gamma.b,dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
